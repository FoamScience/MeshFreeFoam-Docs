<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MeshFreeFoam API Docs â€“ APIDocs</title><link>https://meshfreefoam.github.io/</link><description>Recent content in APIDocs on MeshFreeFoam API Docs</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://meshfreefoam.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: The very first issues I ran into with this documentation project</title><link>https://meshfreefoam.github.io/blog/2023/08/18/the-very-first-issues-i-ran-into-with-this-documentation-project/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/18/the-very-first-issues-i-ran-into-with-this-documentation-project/</guid><description>
&lt;p>There are basically three main issues:&lt;/p>
&lt;h2 id="documenting-c20-specifically-concepts">Documenting C++20 (specifically: concepts)&lt;/h2>
&lt;p>At the time of writing, Hyde doesn&amp;rsquo;t support C++ concepts yet, which I plan to use extensively. The code still compiles (because &lt;code>clang&lt;/code> can compile it) but Hyde ignores &lt;code>require&lt;/code> statements. Its reaction to &lt;code>concept&lt;/code> declarations isn&amp;rsquo;t tested.&lt;br />
The current behavior is that &lt;code>require&lt;/code> does not show up in the declaration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>std&lt;span style="color:#333">::&lt;/span>regular T&lt;span style="color:#333">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">myClass&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>simply appears in the API docs as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">template&lt;/span> &lt;span style="color:#333">&amp;lt;&lt;/span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">T&lt;/span>&lt;span style="color:#333">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#080;font-weight:bold">class&lt;/span> &lt;span style="color:#b06;font-weight:bold">myClass&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which is a lot more generic and may not give a precise idea on what&amp;rsquo;s going on. It&amp;rsquo;s flat out wrong.&lt;/p>
&lt;div class="alert alert-success" role="alert">
At the time of writing, I can live with this though.
&lt;/div>
&lt;h2 id="the-openfoam-fork-needs-to-compile-with-clang">The OpenFOAM fork needs to compile with clang&lt;/h2>
&lt;p>Basically, any dependency code you rely on, as well as your own libraries, need to compile with clang. Foam-Extend, for example, doesn&amp;rsquo;t, since &lt;code>clang&lt;/code> thinks some calls to operators between &lt;code>tmp&lt;/code> objects are unambiguous.&lt;/p>
&lt;p>Also, even with the forks which mostly compile with &lt;code>clang&lt;/code>, they frequently use &lt;code>[[deprecated]]&lt;/code> to make the compiler mark functions and methods as deprecated. But, they do not maintain the inline docs to match the deprecated docs.&lt;/p>
&lt;p>&lt;code>Hyde&lt;/code> actually sets compiler deprecation warnings as errors by default. We have to skip this step, and as a result we lose the automatic synchronization between code and API docs.&lt;/p>
&lt;h2 id="linking-to-actual-source-files">Linking to actual source files&lt;/h2>
&lt;p>Personally I don&amp;rsquo;t like to link API docs to actual source files, but it can be useful to those who don&amp;rsquo;t spend as much time in a CLI environment. I still think It&amp;rsquo;s the job of your IDE to show where stuff are, and to show you the documentation too though.&lt;/p>
&lt;p>Hyde can generate source file relationships if we add &lt;code>-hyde-src-root&lt;/code> to the call but this clutters the left sidebar with unwanted content; I process resulting markdown files with a Python script afterwards to minimize the clutter.&lt;/p>
&lt;blockquote>
&lt;p>Because Hyde processes the expanded AST of C++ files, it doesn&amp;rsquo;t report line numbers for declarations and definitions for now.&lt;/p>
&lt;/blockquote>
&lt;h2 id="recap">Recap&lt;/h2>
&lt;p>The whole system can crumble very easily. And it might not even be your fault, so you couldn&amp;rsquo;t fix it! But while it works, it works marvelously well! Plus, it&amp;rsquo;s an opportunity for me to learn new things (Compiler AST, for example?).&lt;/p></description></item><item><title>Blog: Managing dependency software for `meshfreeFoam`</title><link>https://meshfreefoam.github.io/blog/2023/08/18/managing-dependency-software-for-meshfreefoam/</link><pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/18/managing-dependency-software-for-meshfreefoam/</guid><description>
&lt;p>Dependency management is always a hustle. For my PhD project, I would need to live through this hell for around three years. Specifically, OpenFOAM libraries are dependencies for me and that is a big deal for few reasons:&lt;/p>
&lt;ol>
&lt;li>Which OpenFOAM fork to use? OpenFOAM forks from OpenCFD and Foundation are changing too quickly and Foam-Extend practically gets too little updates.&lt;/li>
&lt;li>My customizations will not fit as changes upstream OpenFOAM maintainers would be interested in merging; simply because they are mostly &amp;ldquo;experimentation&amp;rdquo; and maybe meshless-specific.&lt;/li>
&lt;li>I only need a very small set of OpenFOAM libraries to start and I don&amp;rsquo;t see a way to efficiently leverage the full set of libraries because most of them are optimized for FVM.&lt;/li>
&lt;/ol>
&lt;p>This practically applies to any library that is hard to merge my changes into and gets frequent updates.&lt;/p>
&lt;h2 id="dependency-management-workflow">Dependency management workflow&lt;/h2>
&lt;p>The workflow to manage my dependencies revolves around the following concepts:&lt;/p>
&lt;ul>
&lt;li>Have a central repository for all dependencies in case I change stuff in their code.&lt;/li>
&lt;li>Include that repo as a submodule/subtree in the main project.&lt;/li>
&lt;li>Customizing the dependency code should be as streamlined as possible, without losing the ability to pull changes from upstream repos.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-make-openfoam-libs-available-as-dependencies">How to make OpenFOAM libs available as dependencies&lt;/h3>
&lt;p>There are scripts to automatize this process, but I will explain the most important steps here:&lt;/p>
&lt;p>We start by cloning the project, filtering the paths we need, then tagging the state as &lt;code>original&lt;/code> (You&amp;rsquo;ll need &lt;a href="https://github.com/newren/git-filter-repo/">git-filter-repo&lt;/a> for this).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://develop.openfoam.com/Development/openfoam /tmp/openfoam-scratch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">cd&lt;/span> /tmp/openfoam-scratch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git filter-repo --path COPYING --path Allwmake --path bin --path etc --path src/Allwmake &lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">&lt;/span> --path src/OSspecific --path src/OpenFOAM --path src/Pstream/ &lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">&lt;/span> --path META-INFO/ --path wmake --force
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, in the dependencies repo, add this as a subtree, and make a branch for &lt;code>original&lt;/code> OpenFOAM commits:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">cd&lt;/span> /path/to/repo/root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git subtree add --prefix dependencies/meshfree-openfoam /tmp/openfoam-scratch/ master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b original-openfoam
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Switch back to master, and commit the custom changes we need:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git add -A
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git commit -m &lt;span style="background-color:#fff0f0">&amp;#34;Update OpenFOAM compilation&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Updates from the original repo come in two forms:&lt;/p>
&lt;ul>
&lt;li>New change commits. These may cause conflicts with our changes, so rebasing will allow us to solve them.&lt;/li>
&lt;li>New libraries we want to add. These are also new commits, but we know they won&amp;rsquo;t cause trouble since they only add files to &lt;code>original&lt;/code>. We only have to remember to update &lt;code>Allwmake&lt;/code> scripts to compile those new libraries.&lt;/li>
&lt;/ul>
&lt;p>Here is how to add &lt;code>src/fileFormats&lt;/code> and &lt;code>src/surfMesh&lt;/code> libraries from OpenFOAM:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># Create a new filtered repo with the new libs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rm -rf /tmp/openfoam-scratch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git clone https://develop.openfoam.com/Development/openfoam /tmp/openfoam-scratch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">cd&lt;/span> /tmp/openfoam-scratch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git filter-repo --path COPYING --path Allwmake --path bin --path etc --path src/Allwmake &lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">&lt;/span> --path src/OSspecific --path src/OpenFOAM --path src/Pstream/ &lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#666;background-color:#fff0f0;font-weight:bold">&lt;/span> --path META-INFO/ --path wmake --path src/fileFormats --path src/surfMesh --force
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># Merge those commits into master&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#007020">cd&lt;/span> /path/to/repo/root
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout original-openfoam
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git subtree pull --prefix dependencies/meshfree-openfoam /tmp/openfoam-scratch/ master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout master
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># This merge has less chance of producing conflicts if you&amp;#39;re just adding libs.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git merge original-openfoam
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#888"># On master, don&amp;#39;t forget to update Allwmake to compile the new libs if necessary&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This workflow maintains a healthy level of consistency and makes it easy to experiment with dependency library modifications (e.g. Optimization for GPU, &amp;hellip;, etc) and even changing compiler settings.&lt;/p></description></item><item><title>Blog: Design of domain shapes</title><link>https://meshfreefoam.github.io/blog/2023/08/23/design-of-domain-shapes/</link><pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/23/design-of-domain-shapes/</guid><description>
&lt;p>A few design goals govern how &lt;code>MeshFreeFoam&lt;/code> shapes are implemented, the most important ones being:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Support for dynamically loaded models, starting from STL files&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Support for basic geometric operations (adding, subtracting, scaling, rotating, &amp;hellip;, etc.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Support for physics on boundary patches as well as easy MPI comms&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Customizable boundary filler. Supporting both single-layer and multi-layer filling&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Customizable rho-based inner fillers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Also, shape classes store no actual grid data to ease up geometric operations. Dedicated mesh classes will store point coordinates in a hierarchical manner.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre class="mermaid">graph LR
grid -- as baseShape --&amp;gt; region1
grid -- as baseShape --&amp;gt; region2
region1 --&amp;gt; boundaries1
region1 --&amp;gt; interface
region2 --&amp;gt; interface
region2 --&amp;gt; boundaries2
boundaries1 -.- grid
boundaries2 -.- grid
interface -.- grid
innerFiller o--o grid
boundaries1 &amp;amp; boundaries2 &amp;amp; interface o--o boundaryFiller&lt;/pre>
&lt;h2 id="boundary-treatment">Boundary treatment&lt;/h2>
&lt;p>At first, only single-layer boundary layers are implemented. Shapes only read in the boundary&amp;rsquo;s interface type. These should be similar to OpenFOAM boundary patches&lt;/p>
&lt;p>At the time of writing, few boundary types are planned:&lt;/p>
&lt;ul>
&lt;li>&lt;code>fixedWall&lt;/code> for stationary walls.&lt;/li>
&lt;li>&lt;code>elasticWall&lt;/code> for &amp;ldquo;elastic&amp;rdquo; surfaces.&lt;/li>
&lt;li>&lt;code>freeSurface&lt;/code> for free surface interfaces.&lt;/li>
&lt;li>&lt;code>mixedBoundary&lt;/code> for mixed Neumann-Dirichlet boundary conditions.&lt;/li>
&lt;li>&lt;code>genericBoundary&lt;/code> for arbitrary transport PDE solving on the boundary. PDE&amp;rsquo;s are aggregated to be solved later implicitly with the whole system.&lt;/li>
&lt;/ul>
&lt;p>From this, here is a list of requirements on boundary patches:&lt;/p>
&lt;ol>
&lt;li>Awareness of how many sides (1 or 2). Second side can be imaginary if at the processor&amp;rsquo;s boundary.&lt;/li>
&lt;li>Access to the equation operator classes, hence this may result in circular dependency.&lt;/li>
&lt;li>Access to neighboring inner grid points and data.&lt;/li>
&lt;/ol></description></item><item><title>Blog: Runtime selection mechanism for `MeshFreeFoam`</title><link>https://meshfreefoam.github.io/blog/2023/08/28/runtime-selection-mechanism-for-meshfreefoam/</link><pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/28/runtime-selection-mechanism-for-meshfreefoam/</guid><description>
&lt;p>In short, I&amp;rsquo;ll stick with OpenFOAM&amp;rsquo;s way of doing things when it comes:&lt;/p>
&lt;ul>
&lt;li>RunTime Selection of models&lt;/li>
&lt;li>The plugin system (Function Objects)&lt;/li>
&lt;/ul>
&lt;h2 id="issue-01-dependency-on-the-openfoam-version">Issue 01: Dependency on the OpenFOAM version&lt;/h2>
&lt;p>I have decided to run with the master branch from &lt;a href="https://develop.openfoam.com/Development/openfoam">OpenCFD&amp;rsquo;s OpenFOAM&lt;/a> and the very first I encounter is that the RunTime selection mechanism has changed somewhen between &lt;code>v2012&lt;/code> and &lt;code>v2306&lt;/code>. Not cool.&lt;/p>
&lt;p>So, my solution is to have my own macros for runtime selection but, in the end, they need to be compatible with the version I compile my toolkit with. This is exactly why dependency management will be a challenge on its own.&lt;/p>
&lt;h2 id="issue-02-going-too-far-with-ood-and-effects-on-gpu-optimization">Issue 02: Going too far with OOD and effects on GPU optimization&lt;/h2>
&lt;p>When I look at all public projects which are optimizing for GPU offloading (Here is an &lt;a href="https://github.com/exapde/Exasim">example&lt;/a>) there seems to be no tolerance for virtual methods. Actually, NVIDIA explicitly advises to move away from object oriented design.&lt;/p>
&lt;p>While this is not an option for as, the plan is to have two modes:&lt;/p>
&lt;ul>
&lt;li>One mode employing the standard way of doing things in OpenFOAM in terms of RTS&lt;/li>
&lt;li>A second mode which either leverages &lt;code>dynamicMesh&lt;/code> or some kind of &lt;a href="https://github.com/jmmartinez/easy-just-in-time">&lt;code>JIT compiler&lt;/code>&lt;/a> to generate de-virtualized code at runtime.&lt;/li>
&lt;/ul></description></item><item><title>Blog: Introducing unit tests with foamUT</title><link>https://meshfreefoam.github.io/blog/2023/08/29/introducing-unit-tests-with-foamut/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/29/introducing-unit-tests-with-foamut/</guid><description>
&lt;p>Well, there are three clear objects for unit testing:&lt;/p>
&lt;ul>
&lt;li>Making sure new code does not break older functionality&lt;/li>
&lt;li>Making sure new functionality works as expected&lt;/li>
&lt;li>Making sure important dependency APIs have not changed without us noticing&lt;/li>
&lt;/ul>
&lt;p>To this end, I originally crafted the &lt;a href="https://github.com/FoamScience/foamUT">foamUT&lt;/a> toolkit to unit-test OpenFOAM code in a streamlined way. All that is needed is to write by-library tests and supply the appropriate &lt;code>Make/files&lt;/code> and &lt;code>Make/options&lt;/code> files to compile them. Example tests are provided in the &lt;a href="https://github.com/FoamScience/MeshFreeFoam/tree/master/tests">MeshFreeFoam&lt;/a> repository.&lt;/p>
&lt;p>Unit tests marvelously demonstrate usage of different code entities so I thought we would add them to the documentation website. Head to &lt;a href="https://meshfreefoam.github.io/tests">tests&lt;/a> to browse all unit tests and see their latest states.&lt;/p>
&lt;p>Currently, this feature relies on parsing Catch2 XML reports and I doubt this will change. Of course, at this point,&lt;br />
I&amp;rsquo;m only supporting simple test case reports. I&amp;rsquo;ll expand as I go.&lt;/p></description></item><item><title>Blog: Optimization notes: Part 1</title><link>https://meshfreefoam.github.io/blog/2023/08/29/optimization-notes-part-1/</link><pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/29/optimization-notes-part-1/</guid><description>
&lt;h2 id="kdtree-and-radius-based-searches">KdTree and radius-based searches&lt;/h2>
&lt;p>After sweeping the existing C++ libraries capable of doing k-nearest neighbor (KNN) search with unsorted radius queries, I have reached the conclusion of using &lt;a href="https://github.com/jlblancoc/nanoflann">nanoflann&lt;/a> as a backend for such searches.&lt;/p>
&lt;p>Their API is nice and easy to use but with one specific caveat: The dynamic &lt;code>KdTree&lt;/code> is not trivial to use. After putting up some unit tests to the KdTree wrapper, I quickly discovered that changing the list of point positions we perform searches against is not fun. My current solution is to hash the current content of the list and check it again on each KNN search!&lt;/p>
&lt;p>If the list of points has been radically changed, the KdTree index will be invalid; so we need to reset it. But, if the list is only being appended to (no changes to old elements), the new points are added to the index.&lt;/p>
&lt;p>At this point, I have mainly three unanswered question:&lt;/p>
&lt;ul>
&lt;li>How efficient is to hash the point list?&lt;/li>
&lt;li>How efficient OpenFOAM&amp;rsquo;s implementation of Jenkins hasher is?&lt;/li>
&lt;li>How efficient is to reset the KdTree index (compared to remove all points and add add the new ones)?&lt;/li>
&lt;/ul></description></item><item><title>Blog: Easy API documentation with Hugo and Hyde</title><link>https://meshfreefoam.github.io/blog/2023/08/19/easy-api-documentation-with-hugo-and-hyde/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/19/easy-api-documentation-with-hugo-and-hyde/</guid><description>
&lt;p>Initial work on the companion website project for documenting the design and implementation&lt;br />
of my PhD project (Meshless methods in CFD applications) has been completed. The project&lt;br />
is in usable state.&lt;/p></description></item><item><title>Blog: No Releases?</title><link>https://meshfreefoam.github.io/blog/2023/08/19/no-releases/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://meshfreefoam.github.io/blog/2023/08/19/no-releases/</guid><description>
&lt;p>This Hugo template can be used as a template to spin off new websites. Currently, I see&lt;br />
no need to create releases. Just fork and clone the main branch!&lt;/p></description></item></channel></rss>